version: '3.8'

# Define services
services:
  # App backend service
  app-server:
    # Configuration for building the docker image for the backend service
    image: ghcr.io/smurzz/check-challenge-app-server:1.0.0 # Use an image built from github packages
    container_name: app-server
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: always
    links:
      - mongo
    depends_on: 
      - mongo
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
      - frontend
  
  # Frontend Service 
  app-client:
    image: ghcr.io/smurzz/check-challenge-app-client:1.0.0 # Use an image built from github packages
    container_name: app-client
    ports:
      - "3000:3000" 
    restart: always
    depends_on:
      - app-server
    networks:
      - frontend 

# Database Service (MongoDB, Mongo-Express)
  mongo:
    image: ghcr.io/smurzz/mongo:latest
    command: mongod --port 27018
    container_name: mongo
    restart: always
    ports:
      - "27018:27018"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: check-challenges-db
    volumes:
      - challenge-db:/data/db
    networks:
      - backend
  mongo-express:
    image: ghcr.io/smurzz/mongo-express:latest
    container_name: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: "mongodb://admin:password@mongo:27018/"
    networks:
      - backend
# Volumes
volumes:
  challenge-db:
    
# Networks to be created to facilitate communication between containers
networks:
  backend:
  frontend:  